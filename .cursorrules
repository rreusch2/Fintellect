# .cursorrules

title: "Fintellect - SwiftUI and Node.js Backend Integration"
description: "Context rules for integrating SwiftUI iOS frontend with existing Node.js backend and PostgreSQL database."

# -----------------------------------------------------------
# Context & Project Overview
# -----------------------------------------------------------
project_overview:
  name: "Fintellect"
  summary: >
    Fintellect is an AI-powered financial management platform that provides budgeting, goal tracking, transaction categorization, and personalized AI-driven financial insights. 
    The platform integrates a SwiftUI mobile app with an existing Node.js + PostgreSQL backend and React-based web frontend.

# -----------------------------------------------------------
# Dynamic Rules Maintenance
# -----------------------------------------------------------
rules_maintenance:
  auto_update: true
  trigger_events:
    - "New endpoints or API changes"
    - "Component additions or modifications"
    - "Integration of new services or features"
    - "Architecture or pattern changes"
    - "New dependencies or tech stack updates"
    - "Security protocol changes"
    - "Workflow or process updates"
    - "Common issues and their solutions"
    - "New development environment configurations"
  update_responsibilities:
    - "AI agents should proactively update this file without being asked"
    - "Updates should be made after significant changes or additions to the codebase"
    - "Each update should include clear documentation of changes and their implications"
    - "Previous rules should be preserved unless explicitly obsolete"
    - "Changes should be organized in appropriate sections"
    - "Version history should be maintained in comments when significant changes occur"
  update_format:
    - "Use clear, consistent YAML formatting"
    - "Include detailed descriptions for complex changes"
    - "Group related changes in appropriate sections"
    - "Add new sections when existing ones don't fit the content"
    - "Include examples where helpful"
    - "Add migration notes if changes affect existing code"

important_notes:
  - "We have completed the backend integration for the AuthView in the SwiftUI mobile app."
  - "The next steps involve integrating the onboarding flow and extending backend features like Plaid and goal management into the SwiftUI frontend."
  - "The AI agent must have a clear understanding of the project structure, existing files, and functionality to avoid 'Invalid redeclaration' and similar issues."
  - "This AI agent has the ability to search, analyze, and edit files across all major folders without explicit instructions. It must avoid creating redundant or conflicting code."

# -----------------------------------------------------------
# Environment & Workflow Details
# -----------------------------------------------------------
environment:
  operating_system: "Windows 11 PC and MacinCloud (macOS environment)"
  workflow:
    - "I code on Cursor on my Windows 11 PC."
    - "When changes are ready, I run 'gpush,' a custom PowerShell function that executes 'git add .', 'git commit -m "Update",' and 'git push origin ios-development.'"
    - "I then switch to MacinCloud, pull the latest changes, and open them in Cursor or Xcode."
    - "On MacinCloud, I start the Node.js backend with 'npm run dev' and test the SwiftUI app using the Xcode simulator."

# -----------------------------------------------------------
# Directory Structure
# -----------------------------------------------------------
folders:
  - client: "React/TypeScript web frontend with TanStack Query, Tailwind CSS, and Framer Motion."
  - server: "Node.js + Express + TypeScript backend with Drizzle ORM, Passport.js authentication, and Plaid integration."
  - db: "PostgreSQL schema and migrations (Neon.tech) with tables for users, transactions, goals, and budgets."
  - mobile: "SwiftUI iOS app with MVVM architecture for interacting with the backend APIs."

# -----------------------------------------------------------
# Project Tree
# -----------------------------------------------------------
project_tree: >
  ðŸ“¦ Fintellect
  â”œâ”€â”€ ðŸ“‚ mobile
  â”‚   â””â”€â”€ ðŸ“‚ FintellectMobile
  â”‚       â””â”€â”€ ðŸ“‚ FintellectMobile
  â”‚           â”œâ”€â”€ ðŸ“‚ Features
  â”‚           â”‚   â”œâ”€â”€ ðŸ“‚ AIFinancialAssistant
  â”‚           â”‚   â”‚   â””â”€â”€ Views
  â”‚           â”‚   â”œâ”€â”€ ðŸ“‚ Auth
  â”‚           â”‚   â”‚   â”œâ”€â”€ ðŸ“„ AuthView.swift
  â”‚           â”‚   â”‚   â”œâ”€â”€ ðŸ“„ AuthViewModel.swift
  â”‚           â”‚   â”‚   â”œâ”€â”€ ðŸ“„ LoginView.swift
  â”‚           â”‚   â”‚   â””â”€â”€ ðŸ“„ RegisterView.swift
  â”‚           â”‚   â”œâ”€â”€ ðŸ“‚ Dashboard
  â”‚           â”‚   â”‚   â”œâ”€â”€ ðŸ“„ DashboardView.swift
  â”‚           â”‚   â”‚   â””â”€â”€ ðŸ“„ DashboardViewModel.swift
  â”‚           â”‚   â””â”€â”€ ðŸ“‚ Onboarding
  â”‚           â”‚       â”œâ”€â”€ ðŸ“„ OnboardingView.swift
  â”‚           â”‚       â”œâ”€â”€ ðŸ“„ TermsSheet.swift
  â”‚           â”‚       â””â”€â”€ ðŸ“„ BankConnectionStepView.swift
  â”‚           â”œâ”€â”€ ðŸ“‚ Models
  â”‚           â”‚   â”œâ”€â”€ ðŸ“„ User.swift
  â”‚           â”‚   â””â”€â”€ ðŸ“„ Transaction.swift
  â”‚           â””â”€â”€ ðŸ“‚ Services
  â”‚               â”œâ”€â”€ ðŸ“„ APIClient.swift
  â”‚               â””â”€â”€ ðŸ“„ KeychainManager.swift
  â”œâ”€â”€ ðŸ“‚ server
  â”‚   â”œâ”€â”€ ðŸ“‚ auth
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ index.ts
  â”‚   â”‚   â””â”€â”€ ðŸ“„ mobile.ts
  â”‚   â”œâ”€â”€ ðŸ“‚ middleware
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ jwtAuth.ts
  â”‚   â”‚   â””â”€â”€ ðŸ“„ secure.ts
  â”‚   â”œâ”€â”€ ðŸ“‚ routes
  â”‚   â”‚   â”œâ”€â”€ ðŸ“„ plaid.ts
  â”‚   â”‚   â””â”€â”€ ðŸ“„ index.ts
  â”‚   â”œâ”€â”€ ðŸ“‚ services
  â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ ai
  â”‚   â”‚   â”‚   â””â”€â”€ ðŸ“‚ agents
  â”‚   â”‚   â””â”€â”€ ðŸ“„ plaid.ts
  â”‚   â”œâ”€â”€ ðŸ“„ index.ts
  â”‚   â””â”€â”€ ðŸ“„ routes.ts
  â”œâ”€â”€ ðŸ“‚ client
  â”‚   â”œâ”€â”€ ðŸ“‚ src
  â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ components
  â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ hooks
  â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ pages
  â”‚   â”‚   â””â”€â”€ ðŸ“‚ lib
  â”‚   â””â”€â”€ ðŸ“„ index.html
  â”œâ”€â”€ ðŸ“‚ db
  â”‚   â”œâ”€â”€ ðŸ“„ schema.ts
  â”‚   â””â”€â”€ ðŸ“„ migrate.ts
  â”œâ”€â”€ ðŸ“„ .env
  â””â”€â”€ ðŸ“„ .cursorrules

# -----------------------------------------------------------
# File & Folder Rules
# -----------------------------------------------------------
cursor_rules:
  - "Never create new files or folders if they already exist. If unsure, ask for clarification."
  - "Avoid 'Invalid redeclaration' issues by always referencing existing models, enums, and classes."
  - "Before creating or editing any code, analyze the relevant files to ensure consistency and compatibility."
  - "When adding backend integration, ensure consistent API contracts and align mobile, web, and server implementations."
  - "If additional context or details are needed, ask for clarification rather than making assumptions."

# -----------------------------------------------------------
# Best Practices & AI Behavior
# -----------------------------------------------------------
behavior:
  - "Maintain a single source of truth for backend data shared across mobile and web apps."
  - "Adopt SwiftUI best practices, including MVVM architecture, async/await for networking, and state management using @Published."
  - "Follow Apple's Human Interface Guidelines for UI/UX while aligning with the Fintellect React web app's design consistency."
  - "Add meaningful debugging logs whenever implementing new features to assist in error tracking and resolution."

enhancements:
  - "If you think of valuable ideas or suggestions, append them to 'C:\\Users\\reidr\\OneDrive\\Desktop\\APP Rep\\doc.txt' for review."
  - "Propose optimizations for performance, scalability, or user experience when relevant."
  - "Include detailed comments in generated code to explain functionality and ease future maintenance."

tech_stack:
  frontend:
    - "SwiftUI for iOS frontend with MVVM architecture."
    - "React (TypeScript) for the web frontend."
    - "Tailwind CSS, Framer Motion, Wouter, and shadcn/ui for React UI."
  backend:
    - "Node.js + Express + TypeScript for backend APIs."
    - "Drizzle ORM for database interactions."
    - "Plaid API for financial data aggregation and sync."
  database:
    - "PostgreSQL (Neon.tech) for data storage with schema for users, transactions, goals, and budgets."

# -----------------------------------------------------------
# Current Project State
# -----------------------------------------------------------
current_state:
  auth_integration:
    - "AuthView in SwiftUI mobile app successfully integrated with the Node.js backend."
    - "Login and registration flows are functional with token-based authentication (access/refresh tokens)."
  onboarding_progress:
    - "Onboarding features need integration into the SwiftUI frontend."
    - "The backend tracks onboarding steps via 'onboardingStep' and 'hasCompletedOnboarding' fields in the users table."
  next_steps:
    - "Use these as suggestions but feel free to use your own suggested next steps as well." 
    - "Integrate onboarding flow in the SwiftUI app, including updating user onboarding state via API."
    - "Expand backend integration to include Plaid bank account linking and goal management."
    - "Ensure alignment between the mobile app, backend, and React web app APIs."

# -----------------------------------------------------------
# Mobile App Architecture
# -----------------------------------------------------------
mobile_architecture:
  pattern: "MVVM (Model-View-ViewModel)"
  key_components:
    - "Views: SwiftUI views with modern design system"
    - "ViewModels: @MainActor classes managing state and business logic"
    - "Models: Codable structs for data representation"
    - "Services: APIClient, KeychainManager for backend communication"

# -----------------------------------------------------------
# Authentication Flow Details
# -----------------------------------------------------------
auth_flow:
  implementation:
    - "JWT-based authentication for mobile app"
    - "Session-based authentication for web app"
    - "Secure token storage in iOS Keychain"
  token_config:
    access_token_expiry: "15m"
    refresh_token_expiry: "7d"
  endpoints:
    - "/api/auth/mobile/login"
    - "/api/auth/mobile/register"
    - "/api/auth/mobile/refresh"
    - "/api/auth/mobile/verify"

# -----------------------------------------------------------
# Development Environment
# -----------------------------------------------------------
development:
  local:
    backend_url: "http://127.0.0.1:5001"
    web_url: "http://localhost:5173"
  macincloud:
    backend_url: "https://216.39.74.172:5001"
    ssl: "Self-signed certificates for development"

# -----------------------------------------------------------
# Code Organization
# -----------------------------------------------------------
code_structure:
  mobile:
    - "Features/: Feature-based modules with MVVM structure"
    - "Services/: Shared services like APIClient, KeychainManager"
    - "Models/: Shared data models and types"
    - "Utils/: Helper functions and extensions"
  server:
    - "auth/: Authentication logic including mobile JWT support"
    - "routes/: API endpoints organized by feature"
    - "middleware/: Custom middleware including JWT verification"
    - "services/: Business logic and external integrations"

# -----------------------------------------------------------
# Current Implementation Status
# -----------------------------------------------------------
status:
  completed:
    - "Mobile authentication infrastructure with JWT"
    - "Secure token storage in Keychain"
    - "Demo user support"
    - "Basic error handling and logging"
  in_progress:
    - "Onboarding flow integration"
    - "Plaid connection in mobile app"
    - "Terms acceptance and legal consent"
  pending:
    - "Protected routes for main features"
    - "Enhanced error handling"
    - "Comprehensive logging system"
    - "Production environment setup"

# -----------------------------------------------------------
# Common Issues & Solutions
# -----------------------------------------------------------
troubleshooting:
  auth:
    - "Issue: Token storage errors"
      solution: "Ensure KeychainManager is properly handling all error cases"
    - "Issue: Connection refused errors"
      solution: "Check server URL configuration and SSL certificate setup"
    - "Issue: Invalid redeclaration errors"
      solution: "Ensure models are defined in a single location and imported correctly"
  build:
    - "Issue: Module import errors"
      solution: "Add explicit file extensions in ECMAScript imports"
    - "Issue: Type mismatches"
      solution: "Verify model definitions match between client and server"

# -----------------------------------------------------------
# Testing & Debugging
# -----------------------------------------------------------
testing:
  mobile:
    - "Use DEBUG flag for demo data in development"
    - "Comprehensive console logging with [Module] prefix"
    - "Xcode simulator with iOS 17.0+"
  server:
    - "Request logging middleware for API calls"
    - "Environment-specific error details"
    - "Health check endpoint at /api/health"

# -----------------------------------------------------------
# Security Considerations
# -----------------------------------------------------------
security:
  mobile:
    - "Secure token storage in Keychain"
    - "HTTPS for all API communications"
    - "Token refresh mechanism"
  server:
    - "JWT secret management"
    - "CORS configuration"
    - "Rate limiting (pending)"
    - "Security headers"

# -----------------------------------------------------------
# Final Notes
# -----------------------------------------------------------
notes: >
  The project is transitioning from a web-only application to a multi-platform solution.
  Mobile development prioritizes user experience while maintaining security.
  All new features should be documented here to maintain consistency across the codebase.
